;******************************* FLBOOT.TAL ********************************
;  (C) Copyright 1987-1993  Computer System Architects, Provo UT.           *
;  This  program is the property of Computer System Architects (CSA)        *
;  and is provided only as an example of a transputer/PC program for        *
;  use  with CSA's Transputer Education Kit and other transputer products.  *
;  You may freely distribute copies or modifiy the program as a whole or in *
;  part, provided you insert in each copy appropriate copyright notices and *
;  disclaimer of warranty and send to CSA a copy of any modifications which *
;  you plan to distribute.						    *
;  This program is provided as is without warranty of any kind. CSA is not  *
;  responsible for any damages arising out of the use of this program.      *
;***************************************************************************/
;****************************************************************************
; This program  boots a transputer, does necessary initialization and
; boots other transputers connected to it with an exact copy of itself. It
; keeps track of links through which other trnasputers are booted.
; After booting process, it loads the loader and sends copies of the loader
; to other transputers connected. Then it starts executing the loader.
;***************************************************************************


;Notes for whitecross WX9020 modifications made by macihenroomfiddling@gmail.com 2019/2020.
;The original code used a process to write the bootstrap out on each link, other than bootin.
;On a normal network this works because only a freshly reset node will accept the bootstrap, in which case
; the link on the parent that did the write is marked as valid. If the node is already booted (or booting)
; then the bootstrap won't be received on any other link. The bootstrap write by a 2nd parent will block and
; the link won't be marked as active.
;I _believe_ the links are buffered (via the HSL cards) so the normal mechanism won't work since all
; writes will succeed and all links will be marked as valid. Instead, each node now writes the bootstrap out on
; each link, then waits for reciept of a an ACK message (just a known token) on the link. When this is received
; then the link is marked as valid.
; Also tidied things specifically for WX9020 (an array of T425s) - removed support for 2K memory.

	.t800
;  val definition;

    .val    WORKSPACE_RESERVED,5    ;5 words is max additional workspace requirement for a concurrent process
	.val    RESERVE,16
	.val    CALLWSP,-4
	.val    INITIME,0
	.val    DELAY,100
	.val    LOCTOP,16

    ;this struct shared with flboot & ident & main mandel code - the order is important!
	.val    MININT,1
	.val    MEMSTART,2
	.val    BOOTIN,3
	.val    BOOTOUT,4               ;4,5,6 contain links out (array of 3 link IDs, 0 if not connected to another transputer)
	.val    BOOTOUT1,4
	.val    BOOTOUT2,5
	.val    BOOTOUT3,6
	.val    LDSTART,7               ;zeroed during BOOTOUT save
	.val    ENTRYP,8
	.val    BO_IDX,9
	.val    WSPACE,9
	.val    LDADDR,10
    .val    TRANTYPE,11
	.val    CODELEN,12              ;high order bytes must stay zeroed
	.val    LOOPA,13
	.val    LOOPB,14
	.val    TLINK,15                ;NOTE shared location
	.val    WSP,15

	.val    OLINK,1
	.val    OBOOTOUT,2
	.val    OTEMP,3
	.val    OCODE,4
	.val    OSIZE,5
	.val    OLOCAL,6

	.val    OBUFWS,OLOCAL+WORKSPACE_RESERVED     
	
	.val    BOOTED,0xB007EEED

	.pub    START
;initialization

	.align
START:  
    ajw     RESERVE                 ;reserve work space (16 words) -> Wptr = memstart + codelen + 16w (8000 019c)
	stl     BOOTIN                  ;pop Iptr
	stl     BOOTIN                  ;pop Wdesc
	stl     BOOTIN                  ;pop in boot link
    ldmemstartval
    stl     MEMSTART                ;save memory start (start of bootstrap code)
	ldc     @END-@START             
	stl     CODELEN                 ;save length of bootstrap code
	mint
	stl     MININT                  ;save MIN INTEGER (more efficient to 'ldl MININT' than mint)
	ldl     MININT                  ;init process front pointers
	stlf
	ldl     MININT
	sthf
I1: ldc     0                       ;init links and event
	stl     LOOPA                   ;LOOPA=0 (lend control block 0:11)
	ldc     11
	stl     LOOPB                   
I2: ldl     MININT                  ;init link control words to minint
	ldl     LOOPA                   
	ldl     MININT                  
	wsub                            
	stnl    0                       ;minint[LOOPA+0]=minint
	ldlp    LOOPA
	ldc     I3-I2
	lend                            ;inc & test loop control struct
I3: ldc     INITIME                 ;start timer at INITIME(0)
	sttimer
	testerr                         ;clear error flag
	clrhalterr                      ;clear halt on error
    lddevid
    stl TRANTYPE


    ;send BOOTED word to host to acknowlege bootstrap code received and executing
    ldl     BOOTIN
    ldc     16
    sub
    ldc     BOOTED
    outword

	ldc     0                       ;BOOTOUT[0]:= 0 (default to inactive link)
	stl     BOOTOUT1
	ldc     0        
	stl     BOOTOUT2
	ldc     0        
	stl     BOOTOUT3
	ldc     0        
	stl     BO_IDX

; boot neighbors. Use processes since in,out can block
; send bootstrap out on all links, except link booted from.
	ldlp    LOCTOP                  ;init new work space ptr (at top of current locals)
	stl     WSP
	ldc     0                       ;loop i:= 0 for 4 each link
	stl     LOOPA                   ;LOOPA = lend control struct 0:4
	ldc     4
	stl     LOOPB
B1: ldl     LOOPA                   ;if LINKIN[i] <> BOOTIN
	ldl     MININT
	ldnlp   4
	wsub
	ldl     BOOTIN
	diff
	cj      @B3
	ldl     WSP                     ;alloc OUTBUF work space
	ldnlp   OBUFWS
	stl     WSP
	ldl     LOOPA                   ;save LINKOUT[i]
	ldl     MININT
	wsub
	ldl     WSP
	stnl    OLINK

	;{{{ send address of BOOTOUT[i] to be filled in by process if bootstrap recieved
	ldl     BO_IDX
	ldlp    BOOTOUT
	wsub
	ldl     WSP
	stnl    OBOOTOUT       
	;}}}

    ldl     MEMSTART
    ldl     WSP
    stnl    OCODE

    ldl     CODELEN
    ldl     WSP
    stnl    OSIZE
	
	ldc     BOOT-B2               ;save iptr to OUTBUF
	ldpi
B2: ldl     WSP
	stnl    -1
	ldl     WSP                     ;load new work space ptr
	runp                            ;run output buffer process

	ldl     BO_IDX
	adc     1
	stl     BO_IDX

B3: ldlp    LOOPA
	ldc     B4-B1
	lend                            ;end loop
B4: 
    ldtimer                         ;wait for any com. to finish
	adc     DELAY
	tin                             ;block until timer reaches DELAY


; loader and executer setup (received on same link as bootstrap)
    ldlp    CODELEN                 ;input length of fload loader
    ldl     BOOTIN
    ldc     1
    in                              ;A=len, B=link, C=addr
    ldl     MEMSTART                ;input fload loader
    ldl     BOOTIN
    ldl     CODELEN
    in

; send loader to neighbors
H2: ldc     0                       ;loop i:= 0 for 3 each BOOTOUT link
    stl     LOOPA
    ldc     3
    stl     LOOPB
H3: 
    ldl     LOOPA                   ;TLINK:= BOOTOUT[i]
    ldlp    BOOTOUT
    wsub
    ldnl    0
    stl     TLINK
    ldl     TLINK                   ;if TLINK <> 0
    cj      @H4

    ldlp    CODELEN                 ;send out length to neighbors (1 byte)
    ldl     TLINK
    ldc     1
    out
    ldl     MEMSTART                ;send out code to neighbors
    ldl     TLINK
    ldl     CODELEN
    out            

H4: ldlp    LOOPA
    ldc     H5-H3
    lend                            ;end loop
H5:
    ldlp    LOCTOP                  ;init load start address
    stl     LDSTART
    ldl     LDSTART                 ;init entry point
    stl     ENTRYP
    ldlp    CALLWSP                 ;init work space
    stl     WSPACE
    ldl     MEMSTART                ;go to loader
    gcall



; boot link
BOOT: 
    ;send bootstrap
    ldl     OLINK                   ;load output link
    ldl     OSIZE
    outbyte                         ;output code length
    ldl     OCODE
    ldl     OLINK                   ;load output link
    ldl     OSIZE                   ;load code length
    out                             ;output code

    ;receive ACK word - if == BOOTED then the daughter booted
    ldlp    OTEMP
    ldl     OLINK                   ;input reg is 16 bytes on from output
    adc     16
    ldc     4                       ;read a word
    in
    ldl     OTEMP
    ldc     BOOTED
    diff
    cj      @P1
    stopp
P1:
    ;if the code got this far it means the worm has been recieved by a downstream transputer
    ;and the bootstrap has returned an ACK word (BOOTED)
    ;mark this boot link as active - store the output link register address into BOOTOUT array
    ldl     OLINK
    ldl     OBOOTOUT
    stnl    0
    stopp

        .align
END:    .end
